/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-sqlite";
import {
    sqliteTable,
    index,
    uniqueIndex,
    foreignKey,
    integer,
    text,
    numeric,
} from "@payloadcms/db-sqlite/drizzle/sqlite-core";
import { sql, relations } from "@payloadcms/db-sqlite/drizzle";

export const users_sessions = sqliteTable(
    "users_sessions",
    {
        _order: integer("_order").notNull(),
        _parentID: integer("_parent_id").notNull(),
        id: text("id").primaryKey(),
        createdAt: text("created_at").default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        expiresAt: text("expires_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        _orderIdx: index("users_sessions_order_idx").on(columns._order),
        _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
        _parentIDFk: foreignKey({
            columns: [columns["_parentID"]],
            foreignColumns: [users.id],
            name: "users_sessions_parent_id_fk",
        }).onDelete("cascade"),
    }),
);

export const users = sqliteTable(
    "users",
    {
        id: integer("id").primaryKey(),
        username: text("username").notNull(),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        email: text("email").notNull(),
        resetPasswordToken: text("reset_password_token"),
        resetPasswordExpiration: text("reset_password_expiration").default(
            sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`,
        ),
        salt: text("salt"),
        hash: text("hash"),
        loginAttempts: numeric("login_attempts").default("0"),
        lockUntil: text("lock_until").default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
        users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
        users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
    }),
);

export const media = sqliteTable(
    "media",
    {
        id: integer("id").primaryKey(),
        alt: text("alt").notNull(),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        url: text("url"),
        thumbnailURL: text("thumbnail_u_r_l"),
        filename: text("filename"),
        mimeType: text("mime_type"),
        filesize: numeric("filesize"),
        width: numeric("width"),
        height: numeric("height"),
        focalX: numeric("focal_x"),
        focalY: numeric("focal_y"),
    },
    (columns) => ({
        media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
        media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
        media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
    }),
);

export const gallery = sqliteTable(
    "gallery",
    {
        id: integer("id").primaryKey(),
        _order: text("_order"),
        title: text("title").notNull(),
        description: text("description"),
        width: numeric("width"),
        height: numeric("height"),
        unit: text("unit", { enum: ["cm", "inch"] }).default("cm"),
        image: integer("image_id")
            .notNull()
            .references(() => media.id, {
                onDelete: "set null",
            }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        gallery__order_idx: index("gallery__order_idx").on(columns._order),
        gallery_image_idx: index("gallery_image_idx").on(columns.image),
        gallery_updated_at_idx: index("gallery_updated_at_idx").on(columns.updatedAt),
        gallery_created_at_idx: index("gallery_created_at_idx").on(columns.createdAt),
    }),
);

export const payload_locked_documents = sqliteTable(
    "payload_locked_documents",
    {
        id: integer("id").primaryKey(),
        globalSlug: text("global_slug"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_locked_documents_global_slug_idx: index("payload_locked_documents_global_slug_idx").on(
            columns.globalSlug,
        ),
        payload_locked_documents_updated_at_idx: index("payload_locked_documents_updated_at_idx").on(columns.updatedAt),
        payload_locked_documents_created_at_idx: index("payload_locked_documents_created_at_idx").on(columns.createdAt),
    }),
);

export const payload_locked_documents_rels = sqliteTable(
    "payload_locked_documents_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        usersID: integer("users_id"),
        mediaID: integer("media_id"),
        galleryID: integer("gallery_id"),
    },
    (columns) => ({
        order: index("payload_locked_documents_rels_order_idx").on(columns.order),
        parentIdx: index("payload_locked_documents_rels_parent_idx").on(columns.parent),
        pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
        payload_locked_documents_rels_users_id_idx: index("payload_locked_documents_rels_users_id_idx").on(
            columns.usersID,
        ),
        payload_locked_documents_rels_media_id_idx: index("payload_locked_documents_rels_media_id_idx").on(
            columns.mediaID,
        ),
        payload_locked_documents_rels_gallery_id_idx: index("payload_locked_documents_rels_gallery_id_idx").on(
            columns.galleryID,
        ),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [payload_locked_documents.id],
            name: "payload_locked_documents_rels_parent_fk",
        }).onDelete("cascade"),
        usersIdFk: foreignKey({
            columns: [columns["usersID"]],
            foreignColumns: [users.id],
            name: "payload_locked_documents_rels_users_fk",
        }).onDelete("cascade"),
        mediaIdFk: foreignKey({
            columns: [columns["mediaID"]],
            foreignColumns: [media.id],
            name: "payload_locked_documents_rels_media_fk",
        }).onDelete("cascade"),
        galleryIdFk: foreignKey({
            columns: [columns["galleryID"]],
            foreignColumns: [gallery.id],
            name: "payload_locked_documents_rels_gallery_fk",
        }).onDelete("cascade"),
    }),
);

export const payload_preferences = sqliteTable(
    "payload_preferences",
    {
        id: integer("id").primaryKey(),
        key: text("key"),
        value: text("value", { mode: "json" }),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_preferences_key_idx: index("payload_preferences_key_idx").on(columns.key),
        payload_preferences_updated_at_idx: index("payload_preferences_updated_at_idx").on(columns.updatedAt),
        payload_preferences_created_at_idx: index("payload_preferences_created_at_idx").on(columns.createdAt),
    }),
);

export const payload_preferences_rels = sqliteTable(
    "payload_preferences_rels",
    {
        id: integer("id").primaryKey(),
        order: integer("order"),
        parent: integer("parent_id").notNull(),
        path: text("path").notNull(),
        usersID: integer("users_id"),
    },
    (columns) => ({
        order: index("payload_preferences_rels_order_idx").on(columns.order),
        parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
        pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
        payload_preferences_rels_users_id_idx: index("payload_preferences_rels_users_id_idx").on(columns.usersID),
        parentFk: foreignKey({
            columns: [columns["parent"]],
            foreignColumns: [payload_preferences.id],
            name: "payload_preferences_rels_parent_fk",
        }).onDelete("cascade"),
        usersIdFk: foreignKey({
            columns: [columns["usersID"]],
            foreignColumns: [users.id],
            name: "payload_preferences_rels_users_fk",
        }).onDelete("cascade"),
    }),
);

export const payload_migrations = sqliteTable(
    "payload_migrations",
    {
        id: integer("id").primaryKey(),
        name: text("name"),
        batch: numeric("batch"),
        updatedAt: text("updated_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
        createdAt: text("created_at")
            .notNull()
            .default(sql`(strftime('%Y-%m-%dT%H:%M:%fZ', 'now'))`),
    },
    (columns) => ({
        payload_migrations_updated_at_idx: index("payload_migrations_updated_at_idx").on(columns.updatedAt),
        payload_migrations_created_at_idx: index("payload_migrations_created_at_idx").on(columns.createdAt),
    }),
);

export const relations_users_sessions = relations(users_sessions, ({ one }) => ({
    _parentID: one(users, {
        fields: [users_sessions._parentID],
        references: [users.id],
        relationName: "sessions",
    }),
}));
export const relations_users = relations(users, ({ many }) => ({
    sessions: many(users_sessions, {
        relationName: "sessions",
    }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_gallery = relations(gallery, ({ one }) => ({
    image: one(media, {
        fields: [gallery.image],
        references: [media.id],
        relationName: "image",
    }),
}));
export const relations_payload_locked_documents_rels = relations(payload_locked_documents_rels, ({ one }) => ({
    parent: one(payload_locked_documents, {
        fields: [payload_locked_documents_rels.parent],
        references: [payload_locked_documents.id],
        relationName: "_rels",
    }),
    usersID: one(users, {
        fields: [payload_locked_documents_rels.usersID],
        references: [users.id],
        relationName: "users",
    }),
    mediaID: one(media, {
        fields: [payload_locked_documents_rels.mediaID],
        references: [media.id],
        relationName: "media",
    }),
    galleryID: one(gallery, {
        fields: [payload_locked_documents_rels.galleryID],
        references: [gallery.id],
        relationName: "gallery",
    }),
}));
export const relations_payload_locked_documents = relations(payload_locked_documents, ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
        relationName: "_rels",
    }),
}));
export const relations_payload_preferences_rels = relations(payload_preferences_rels, ({ one }) => ({
    parent: one(payload_preferences, {
        fields: [payload_preferences_rels.parent],
        references: [payload_preferences.id],
        relationName: "_rels",
    }),
    usersID: one(users, {
        fields: [payload_preferences_rels.usersID],
        references: [users.id],
        relationName: "users",
    }),
}));
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
    _rels: many(payload_preferences_rels, {
        relationName: "_rels",
    }),
}));
export const relations_payload_migrations = relations(payload_migrations, () => ({}));

type DatabaseSchema = {
    users_sessions: typeof users_sessions;
    users: typeof users;
    media: typeof media;
    gallery: typeof gallery;
    payload_locked_documents: typeof payload_locked_documents;
    payload_locked_documents_rels: typeof payload_locked_documents_rels;
    payload_preferences: typeof payload_preferences;
    payload_preferences_rels: typeof payload_preferences_rels;
    payload_migrations: typeof payload_migrations;
    relations_users_sessions: typeof relations_users_sessions;
    relations_users: typeof relations_users;
    relations_media: typeof relations_media;
    relations_gallery: typeof relations_gallery;
    relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
    relations_payload_locked_documents: typeof relations_payload_locked_documents;
    relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
    relations_payload_preferences: typeof relations_payload_preferences;
    relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-sqlite" {
    export interface GeneratedDatabaseSchema {
        schema: DatabaseSchema;
    }
}
